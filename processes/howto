Роцесс может быть создать двумя способами - с помощью fork либо с помощью семейства функций exec.
Отличие между ними:
z z В результате успешного вызова fork получаются два отдельных процесса: ро-
дительский, который вызывал fork , и дочерний. Успешное выполнение exec*
заключается в замене вызывающего процесса новым образом, в результате чего
новый процесс не создается.

z z Вызов fork дублирует все содержимое памяти родительского процесса, поэтому
потомку доступны все те же адреса и переменные. Для сравнения, вызов exec*
уничтожает структуру памяти базового процесса и создает новую структуру,
основанную на загруженном исполняемом файле.

z z У скопированного процесса есть доступ к определенным атрибутам родителя,
таким как открытые файловые дескрипторы. А вот при использовании функций
exec* новый процесс не знает об атрибутах старого и ничего от него не насле-
дует.

z z В обоих случаях новый процесс содержит всего один главный поток. Потоки
родительного процесса не копируются при использовании fork .

z z Функции exec* можно применять для выполнения скриптов и внешних испол-
няемых файлов, а fork подходит только для создания новых процессов, которые
являются копией той же программы.


Запуск процесса:

z z проверить контекст выполнения и права доступа пользователя, который запро-
сил выполнение;

z z выделить для нового процесса адресное пространство в основной памяти;

z z скопировать двоичное содержимое исполняемого файла в выделенное про-
странство. Это в основном касается сегментов данных и кода;

z z выделить область памяти для сегмента стека и подготовить начальные привязки
памяти;

z z создать главный поток выполнения и его сегмент стека;

z z скопировать аргументы командной строки в стековый фрейм и поместить его
на вершину стека главного потока;

z z инициализировать регистры, необходимые для выполнения;

z z выполнить первую инструкцию точки входа в программу.

Разделение ресурсов между процессами:
1. Разделяемая память - адресное пространство процесса ядра, уничтожается при перезагрузке компьютера 
2. Файловая системa

Синхронизация ресурсов между процессами:
1. Именованные семафоры
2. Именованные мьютексы - должны лежать в разделяемой памяти 
3. Именованные условные переменные - должны лежать в разделяемой памяти
